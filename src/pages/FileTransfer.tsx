import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Upload, Download, Shield, AlertCircle } from 'lucide-react'
import axios from 'axios'

interface Client {
  id: string
  name: string
  address: string
  status: 'online' | 'offline'
}

const clients: Client[] = [
  { id: 'client1', name: 'Client 1', address: '0x123...', status: 'online' },
  { id: 'client2', name: 'Client 2', address: '0x456...', status: 'online' },
  { id: 'client3', name: 'Client 3', address: '0x789...', status: 'offline' },
  { id: 'client4', name: 'Client 4', address: '0xabc...', status: 'online' },
]

export function FileTransfer() {
  const [selectedClient, setSelectedClient] = useState<string>('')
  const [file, setFile] = useState<File | null>(null)
  const [uploading, setUploading] = useState(false)
  const [downloadingFrom, setDownloadingFrom] = useState<string>('')

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0]
    if (selectedFile) {
      setFile(selectedFile)
    }
  }

  const handleUpload = async () => {
    if (!file || !selectedClient) {
      alert('Please select a file and client')
      return
    }

    setUploading(true)
    try {
      const formData = new FormData()
      formData.append('file', file)
      formData.append('client', selectedClient)

      // This would integrate with your existing backend
      // For now, we'll simulate the upload process
      console.log(`Uploading ${file.name} for ${selectedClient}`)
      
      // Simulate upload delay
      await new Promise(resolve => setTimeout(resolve, 2000))
      
      alert('File uploaded successfully!')
      setFile(null)
      setSelectedClient('')
    } catch (error) {
      console.error('Upload error:', error)
      alert('Upload failed!')
    } finally {
      setUploading(false)
    }
  }

  const handleDownload = async (clientId: string) => {
    setDownloadingFrom(clientId)
    try {
      // This would call your backend API to get telemetry data
      // Integrating with your existing client.py logic
      const response = await axios.get(`/api/mercedes/telemetry/${clientId}_data`, {
        headers: {
          'X-Nonce': 'nonce_value', // This would come from /get-nonce
          'X-Signature': 'signature_value' // This would be generated by signing
        }
      })
      
      console.log('Downloaded data:', response.data)
      alert(`Data downloaded from ${clientId}`)
    } catch (error) {
      console.error('Download error:', error)
      alert('Download failed!')
    } finally {
      setDownloadingFrom('')
    }
  }

  const testClientAccess = async (clientId: string) => {
    try {
      // This would integrate with your existing TelemetryClient class
      console.log(`Testing access for ${clientId}`)
      
      // Simulate the nonce-signature process from your client.py
      const nonce = Math.random().toString(36).substring(7)
      console.log(`Generated nonce: ${nonce}`)
      
      alert(`Access test completed for ${clientId}`)
    } catch (error) {
      console.error('Access test error:', error)
      alert('Access test failed!')
    }
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">File Transfer</h1>
        <p className="text-muted-foreground">
          Secure blockchain-based file transfers between clients
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Upload className="h-5 w-5" />
              <span>Upload File</span>
            </CardTitle>
            <CardDescription>
              Upload a file to a specific client's endpoint
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Select Client</label>
              <select
                value={selectedClient}
                onChange={(e) => setSelectedClient(e.target.value)}
                className="w-full p-2 border rounded-md bg-background"
              >
                <option value="">Choose a client...</option>
                {clients.filter(c => c.status === 'online').map(client => (
                  <option key={client.id} value={client.id}>
                    {client.name} ({client.address})
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Select File</label>
              <input
                type="file"
                onChange={handleFileSelect}
                className="w-full p-2 border rounded-md bg-background"
              />
              {file && (
                <p className="text-sm text-muted-foreground mt-1">
                  Selected: {file.name} ({(file.size / 1024).toFixed(1)} KB)
                </p>
              )}
            </div>

            <Button 
              onClick={handleUpload} 
              disabled={!file || !selectedClient || uploading}
              className="w-full"
            >
              {uploading ? 'Uploading...' : 'Upload File'}
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Download className="h-5 w-5" />
              <span>Download Data</span>
            </CardTitle>
            <CardDescription>
              Access telemetry data from client endpoints
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {clients.map(client => (
                <div key={client.id} className="flex items-center justify-between p-3 border rounded-md">
                  <div className="flex items-center space-x-3">
                    <div className={`w-2 h-2 rounded-full ${
                      client.status === 'online' ? 'bg-green-500' : 'bg-red-500'
                    }`} />
                    <div>
                      <p className="font-medium">{client.name}</p>
                      <p className="text-sm text-muted-foreground">{client.address}</p>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => testClientAccess(client.id)}
                      disabled={client.status === 'offline'}
                    >
                      Test
                    </Button>
                    <Button
                      size="sm"
                      onClick={() => handleDownload(client.id)}
                      disabled={client.status === 'offline' || downloadingFrom === client.id}
                    >
                      {downloadingFrom === client.id ? 'Downloading...' : 'Download'}
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Shield className="h-5 w-5" />
            <span>Security Information</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            <div className="flex items-start space-x-3 p-3 bg-blue-50 dark:bg-blue-950 rounded-md">
              <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5" />
              <div>
                <p className="font-medium text-blue-900 dark:text-blue-100">Blockchain Security</p>
                <p className="text-sm text-blue-700 dark:text-blue-300">
                  All transfers are secured using blockchain signatures and nonce verification.
                  Each client has a unique private key for authentication.
                </p>
              </div>
            </div>
            <div className="text-sm text-muted-foreground">
              <p><strong>Authentication:</strong> Cryptographic signatures</p>
              <p><strong>Authorization:</strong> Smart contract-based access control</p>
              <p><strong>Encryption:</strong> End-to-end encrypted transfers</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}